#!/usr/bin/python
import gtk
import gtk.glade
import sys
import os
import ConfigParser
import time
import re
import subprocess 
import gobject
import signal
import string
import random
import threading

VDEPATH="/usr/bin"
HOME=os.path.expanduser("~")
MYPATH=HOME + "/.virtualbricks"

#errors, please put us in a common file
ENOERROR	= 0
ENOTCONFIGURED = 1
ENOTPROPERLYCONNECTED = 2
ELINKDOWN = 4
ENORESOURCE = 8
# 

def RandMac():
	# put me into VM utilities, please.
	random.seed()
	mac = "00:aa:"
	mac = mac +"%02x:" % random.getrandbits(8)
	mac = mac +"%02x:" % random.getrandbits(8)
	mac = mac +"%02x:" % random.getrandbits(8)
	mac = mac +"%02x" % random.getrandbits(8)
	return mac


class Plug():
	def __init__(self, _brick):
		self.brick = _brick
		self.sock=None
		self.antiloop=False

	def configured(self):
		if self.sock is None:
			return False
		else:
			return True

	def connected(self):
		if self.antiloop:
			print "Network loop detected!"
			self.antiloop = False
			return False

		self.antiloop = True
		if self.sock is None or self.sock.brick is None:
			self.antiloop=False
			return False
		self.sock.brick.poweron()
		if self.sock.brick.proc is None:
			self.antiloop = False
			return False
		for p in self.sock.brick.plugs:
			if p.connected() == False:
				self.antiloop = False
				return False
		self.antiloop = False
		print "connect ok"
		return True
		
	def connect(self, _sock):
		if _sock == None:
			return False
		else:
			_sock.plugs.append(self)
			self.sock = _sock
			return True
	def disconnect(self):
		self.sock=""
		

class Sock():
	def __init__(self, _brick, _nickname):
		self.brick = _brick
		self.nickname=_nickname
		self.ports = 1
		self.path = ""
		self.plugs = []
		self.brick.factory.socks.append(self)

	def get_free_ports(self):
		return self.ports - len(self.plugs)
	
	def has_valid_path(self):
		return os.access(os.path.dirname(self.path), os.W_OK)
		
		

class BrickConfig():
	def set(self,attr):
		kv = attr.split("=")
		if len(kv) != 2:
			return False
		else:
			print "setting %s to '%s'" % (kv[0], kv[1])
			# pure magic. I love python.
			self.__dict__[kv[0]] = kv[1]
		

	def get(self, key):
		try:
			val = self.__dict__[key]
		except KeyError:
			return None
		return self.__dict__[key]

	def dump(self):
		for (k,v) in self.__dict__.items():
			print "%s=%s" % (k,v)



class Brick():
	def __init__(self, _factory, _name):
		self.factory = _factory
		self.name = _name
		self.plugs = []
		self.socks = []
		self.proc = None
		self.cfg = BrickConfig()
		self.command_builder=dict()
		self.factory.bricks.append(self)
		self.gui_changed = False
		self.need_restart_to_apply_changes = False
		
	def cmdline(self):
		return ""

	def on_config_changed(self):
		return
	
	def help(self):
		print "Object type: " + self.get_type()
		print "Possible configuration parameter: "
		for (k,v) in self.command_builder.items():
			if not k.startswith("*"):
				print v,
				print "  ",
				print "\t(like %s %s)" % (self.prog(), k)	
			else:
				print k + " " + v + "\tset '" + v + "' to append this value to the command line with no argument prefix"
		print "END of help"
		print

	def configured(self):
		return False
	
	def properly_connected(self):
		for p in self.plugs:
			if p.configured() == False:
				return False
		return True
	
	def check_links(self):
		for p in self.plugs:
			if p.connected() == False:
				return False
		return True
	

	def configure(self, attrlist):
		for attr in attrlist:
			self.cfg.set(attr)
		self.on_config_changed()
	
	def connect(self,endpoint):
		for p in self.plugs:
			if not p.configured():
				if (p.connect(endpoint)):
					self.on_config_changed()
					self.gui_changed = True
					return True
		return False
				
	def disconnect(self):
		for p in self.plugs:
			if p.configured():
				p.disconnect()
		self.on_config_changed()
		



	############################
	########### Poweron/Poweroff
	############################

	def poweron(self):
		error = ENOERROR;

		if not self.configured():
			error+=ENOTCONFIGURED
		if not self.properly_connected():
			error+=ENOTPROPERLYCONNECTED
		if not self.check_links():
			error+=ELINKDOWN
		if (error == ENOERROR):
			self._poweron()
		return error

	def build_cmd_line(self):
		res = []
		for (k,v) in self.command_builder.items():
			if not k.startswith("#"):
				value = self.cfg.get(v)
				if value is "*":
					res.append(k)
				elif value is not None and len(value) > 0:
					if not k.startswith("*"):
						res.append(k)
					res.append(value)
		return res


	def args(self):
		res = []
		res.append(self.prog())
		for c in self.build_cmd_line():
			res.append(c)
		return res
	
	def _poweron(self):
		if (self.proc != None):
			return
		command_line = self.args()
		print 'Starting [%s]' % (command_line)
		self.proc = subprocess.Popen(command_line, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
#		self.proc.fromchild.close()
#		self.proc.tochild.close()
		self.pid = self.proc.pid
		self.post_poweron()
		
	def poweroff(self):
		print "Shutting down %s" % self.name
		if (self.proc == None):
			return False
		try:
			os.kill(self.proc.pid, 15)
		except:
			pass
		self.proc.wait()
		self.proc = None
		self.need_restart_to_apply_changes = False
		self.post_poweroff()

	def post_poweron(self):
		pass
	def post_poweroff(self):
		pass


	#############################
	# Console related operations.
	#############################
	def has_console(self):
		if (self.cfg_mgmt != None) and self.proc != None:
			return True
		else:
			return False

	def open_console(self):
		if not self.has_console():
			return 
		else:
			cmdline = ['xterm', '-T',self.name,'-e','vdeterm',self.cfg_mgmt]
			console = subprocess.Popen(cmdline)

	def send(self,msg):
		if self.proc == None:
			return
		self.proc.stdin.write(msg)

	def recv(self):
		if self.proc == None:
			return ''
		return self.proc.stdout.read()

	def close_tty(self):
		sys.stdin.close()
		sys.stdout.close()
		sys.stderr.close()
		

class Switch(Brick):
	def __init__(self, _factory, _name):
		Brick.__init__(self, _factory, _name)
		self.pid = -1
		self.active = 0
		self.cfg.path = MYPATH + '/' + self.name + '.ctl' 
		self.cfg.console = MYPATH + '/' + self.name + '.mgmt' 
		self.cfg.numports = "32"
		self.ports_used = 0
		self.command_builder = {"-s":'path',
					"-M":'console',
					"-x":"hubmode", 
					"-n":"numports", 
					"-F":"fstp", 
					"--macaddr":"macaddr",
					"-m":"mode",
					"-g":"group",
					"--priority":"priority",
					"--mgmtmode":"mgmtmode",
					"--mgmtgroup":"mgmtgroup"
					
					}
		portname = self.name + "_port"
		self.socks.append(Sock(self, portname))
		self.on_config_changed()
	

	def prog(self):
		return VDEPATH + "/vde_switch"

	def get_type(self):
		return 'Switch'

	def on_config_changed(self):
		self.socks[0].path=self.cfg.path
		self.socks[0].ports=int(self.cfg.numports)

		if (self.proc is not None):
			self.need_restart_to_apply_changes = True
	
	def configured(self):
		return self.socks[0].has_valid_path()

class Tap(Brick):
	def __init__(self, _factory, _name):
		Brick.__init__(self, _factory, _name)
		self.pid = -1
		self.active = 0
		self.cfg.name = _name
		self.command_builder = {"-s":'sock', "*tap":"name"}
		self.cfg.sock = ""
		self.plugs.append(Plug(self))
	

	def prog(self):
		return VDEPATH + "/vde_plug2tap"

	def get_type(self):
		return 'Tap'

	def on_config_changed(self):
		if (self.plugs[0].sock is not None):
			self.cfg.sock = self.plugs[0].sock.path
		if (self.proc is not None):
			self.need_restart_to_apply_changes = True

	def configured(self):
		return (self.plugs[0].sock is not None)	


class Wire(Brick):
	def __init__(self, _factory, _name):
		Brick.__init__(self, _factory, _name)
		self.pid = -1
		self.active = 0
		self.cfg.name = _name
		self.command_builder = {"#sock left":"sock0", "#sock right":"sock1"}
		self.cfg.sock0 = ""
		self.cfg.sock1 = ""
		self.plugs.append(Plug(self))
		self.plugs.append(Plug(self))
	
	def on_config_changed(self):
		if (self.plugs[0].sock is not None):
			self.cfg.sock0 = self.plugs[0].sock.path
		if (self.plugs[1].sock is not None):
			self.cfg.sock1 = self.plugs[1].sock.path
		if (self.proc is not None):
			self.need_restart_to_apply_changes = True
	
	def configured(self):
		return (self.plugs[0].sock is not None and self.plugs[1].sock is not None)	
	
	def prog(self):
		return VDEPATH + "/dpipe"
	
	def get_type(self):
		return 'Wire'
	
	def args(self):
		res = []
		res.append(self.prog())
		res.append('vde_plug')
		res.append(self.cfg.sock0)
		res.append('=')
		res.append('vde_plug')
		res.append(self.cfg.sock1)
		return res

class Wirefilter(Wire):
	def __init__(self, _factory, _name):
		Wire.__init__(self, _factory, _name)
		self.command_builder = {"-d":"delay",
					"-l":"loss",
					"-L":"lossburst",
					"-D":"dup",
					"-b":"bandwidth",
					"-s":"speed",
					"-c":"capacity",
					"-n":"noise",
					"-m":"mtu",
					"-N":"nofifo",
					"-M":"console"
			} 
	def args(self):
		res = []
		res.append(self.prog())
		res.append('-v')
		res.append(self.cfg.sock0)
		res.append(':')
		res.append(self.cfg.sock1)
		for param in Brick.build_cmd_line(self):
			res.append(param)
		return res
	
	def prog(self):
		return VDEPATH + "/wirefilter"
	
	def get_type(self):
		return 'Wirefilter'

class TunnelListen(Brick):
	def __init__(self, _factory, _name):
		Brick.__init__(self, _factory, _name)
		self.pid = -1
		self.active = 0
		self.cfg.name = _name
		self.command_builder = {"-s":'sock', 
			"#password":"password", 
			"-p":"port"
		}
		self.cfg.sock = ""
		self.cfg.password = ""
		self.plugs.append(Plug(self))
	

	def prog(self):
		return VDEPATH + "/vde_cryptcab"

	def get_type(self):
		return 'TunnelListen'

	def on_config_changed(self):
		if (self.plugs[0].sock is not None):
			self.cfg.sock = self.plugs[0].sock.path
		if (self.proc is not None):
			self.need_restart_to_apply_changes = True

	def configured(self):
		return (self.plugs[0].sock is not None)	

	def args(self):
		pwdgen="echo %s | sha1sum >/tmp/tunnel_%s.key" % (self.cfg.password, self.name)
		os.system(pwdgen)
		res = [] 
		res.append(self.prog())
		res.append("-P")
		res.append("/tmp/tunnel_%s.key" % self.name)
		for arg in self.build_cmd_line():
			res.append(arg)
		return res	

	def post_poweroff(self):
		os.unlink("/tmp/tunnel_%s.key" % self.name)


class TunnelConnect(TunnelListen):
	def __init__(self, _factory, _name):
		TunnelListen.__init__(self, _factory, _name)
		self.command_builder = {"-s":'sock', 
			"#password":"password", 
			"-p":"localport",
			"-c":"host",
			"#port":"port"
		}
	def on_config_changed(self):
		if (self.plugs[0].sock is not None):
			self.cfg.sock = self.plugs[0].sock.path

		p = self.cfg.get("port")
		if p is not None:
			del(self.cfg.port)
			h = self.cfg.get("host")
			if h is not None:
				h = h.split(":")[0]
				h +=":"+p
				self.cfg.host=h
			
		if (self.proc is not None):
			self.need_restart_to_apply_changes = True
	
	def configured(self):
		return (self.plugs[0].sock is not None) and self.cfg.get("host") and len(self.cfg.host) > 0	

qemu_eth_model = ["rtl8139","e1000","virtio","i82551", "i82557b", "i82559er","ne2k_pci","pcnet","ne2k_isa"]

class VMethernet(Plug, BrickConfig):
	def __init__(self, brick, name):
		Plug.__init__(self, brick)
		self.mac=RandMac()
		self.model='rtl8139'
		self.vlan=len(self.brick.plugs) + len(self.brick.socks) - 1
	

class VM(Brick):
	def __init__(self, _factory, _name):
		Brick.__init__(self, _factory, _name)
		self.pid = -1
		self.active = 0
		self.cfg.name = _name
		self.command_builder = {
			'-M':'machine',
			'-cpu':'cpu',
			'-smp':'smp',
			#numa not supported
			'-fda':'fda',
			'-fdb':'fdb',
			'-hda':'hda',
			'-hdb':'hdb',
			'-hdc':'hdc',
			'-hdd':'hdd',
			'-cdrom':'cdrom',
			#extended drive: TBD
			'-mtdblock':'mtdblock',
			'-m':'ram',
			'-k':'keyboard',
			'-soundhw':'soundhw',
			'-usb':'usbmode',
			#usbdevice to be implemented as a collection
			#device to be implemented as a collection
			'-name':'name',
			'-uuid':'uuid',
			'-nographic':'nographic',
			'-curses':'curses',
			'-no-frame':'noframe',
			'-no-quit':'noquit',
			'-vga':'vga',
			'-full-screen':'full-screen',
			'-sdl':'sdl',
			'-potrait':'potrait',
			'-win2k-hack':'win2k',
			'-no-acpi':'noacpi',
			'no-hpet':'nohpet',
			'-baloon':'baloon',
			#acpitable not supported
			#smbios not supported
			'-kernel':'kernel',
			'-append':'append',
			'-initrd':'initrd',
			'-serial':'serial',
			'-parallel':'parallel',
			'-monitor':'monitor',
			'-qmp':'qmp',
			'-mon':'',
			'-pidfile':'',
			'-singlestep':'',
			'-S':'',
			'-gdb':'',
			'-s':'',
			'-d':'',
			'-hdachs':'',
			'-L':'',
			'-bios':'',
			'-enable-kvm':'',
			'-no-reboot':'',
			'-no-shutdown':'',
			'-loadvm':'',
			'-daemonize':'',
			'-option-rom':'',
			'-clock':'',
			'-rtc':'',
			'-icount':'',
			'-watchdog':'',
			'-watchdog-action':'',
			'-echr':'',
			'-virtioconsole':'',
			'-show-cursor':'',
			'-tb-size':'',
			'-incoming':'',
			'-nodefaults':'',
			'-chroot':'',
			'-runas':'',
			'-readconfig':'',
			'-writeconfig':'',
			'-no-kvm':'',
			'-no-kvm-irqchip':'',
			'-no-kvm-pit':'',
			'-no-kvm-pit-reinjection':'',
			'-pcidevice':'',
			'-enable-nesting':'',
			'-nvram':'',
			'-tdf':'',
			'-kvm-shadow-memory':'',
			'-mem-path':'',
			'-mem-prealloc':''
		}
	
		
	

class BrickFactory(threading.Thread):
	def __init__(self, showconsole=True):
		self.bricks = []
		self.socks = []
		self.showconsole = showconsole
		threading.Thread.__init__(self)
		self.running_condition = True
		

	def getbrickbyname(self, name):
		for b in self.bricks:
			if b.name == name:
				return b
		return None

	def run(self):
		while self.running_condition:
			if (self.showconsole):
				print "virtualbricks> ",
				command = sys.stdin.readline()
				self.parse(command.rstrip('\n'))
			else:
				time.sleep(1)
		sys.exit(0)
	def quit(self):
		for b in self.bricks:
			if b.proc is not None:
				b.poweroff()
		print 'Engine: Bye!'
		self.running_condition = False


	def proclist(self):
		procs = 0
		for b in self.bricks:
			if b.proc is not None:
				procs+=1

			
		if procs > 0:
			print "PID\tType\tname"
			for b in self.bricks:
				if b.proc is not None:
					print "%d\t%s\t%s" % (b.pid,b.get_type(),b.name)
		else:
			print "No process running"

	def parse(self, command):
		if (command == 'q' or command == 'quit'):
			self.quit()
		elif (command == 'h' or command == 'help'):
			print 'no help available'
		elif (command == 'ps'):
			self.proclist()
		
		elif command.startswith('n ') or command.startswith('new '):
			self.newbrick(*command.split(" ")[1:])
		elif command == 'list':
			for obj in self.bricks:
				print "%s %s" % (obj.get_type(), obj.name)
			print "End of list."
			print 			
			
		elif command == 'socks':
			for s in self.socks:
				print "%s" % s.nickname, 
				if s.brick is not None:
					print " - port on %s %s - %d available" % (s.brick.get_type(), s.brick.name, s.get_free_ports())
				else:
					print "not configured."
		else:
			found=None
			for obj in self.bricks:
				if obj.name == command.split(" ")[0]:
					found = obj
					break
			
			if found is not None and len(command.split(" ")) > 1:
				self.brickAction(found, command.split(" ")[1:])
			else:
				print 'Invalid command "%s"' % command	

	def brickAction(self, obj, cmd):
		if (cmd[0] == 'on'):
			err = obj.poweron()
			if (err != ENOERROR):
				print ("Error %d" %err)
		if (cmd[0] == 'off'):
			obj.poweroff()
		if (cmd[0] == 'config'):
			obj.configure(cmd[1:])
		if (cmd[0] == 'show'):
			obj.cfg.dump()
		if (cmd[0] == 'connect' and len(cmd) == 2):
			if(self.connect(obj, cmd[1].rstrip('\n'))):
				print ("Connection ok")
			else:
				print ("Connection failed")
		if (cmd[0] == 'disconnect'):
			obj.disconnect()
		if (cmd[0] == 'help'):
			obj.help()

	def connect(self, brick, nick):
		endpoint = None
		if len(nick) == 0:
			return False
		for n in self.socks:
			if n.nickname == nick:
				endpoint = n
		if endpoint is not None:
			return 	brick.connect(endpoint)
		else:
			print "cannot find " + nick
			print self.socks


	
	def newbrick(self, ntype="", name=""):
		for oldb in self.bricks:
			if oldb.name == name:
				print "Name in use"
				return False
		if ntype == "switch":
			s = Switch(self,name) 
			print "new switch %s OK" % s.name
		elif ntype == "tap":
			s = Tap(self,name) 
			print "new tap %s OK" % s.name
		elif ntype == "vm":
			s = VM(self, name) 
			print "new vm %s OK" % s.name
		elif ntype == "wire":
			s = Wire(self, name) 
			print "new cable %s OK" % s.name
		elif ntype == "wirefilter":
			s = Wirefilter(self,name) 
			print "new wirefilter %s OK" % s.name
		elif ntype == "tunnell":
			s = TunnelListen(self,name) 
			print "new tunnel %s OK" % s.name
		elif ntype == "tunnelc":
			s = TunnelConnect(self,name) 
			print "new tunnel %s OK" % s.name
		#elif ...:
		else:
			print 'Invalid command.'
			return False
		return True
			
			
			

class VBGUI:
	def __init__(self):
		if not os.access(MYPATH, os.X_OK):
			os.mkdir(MYPATH)

		gtk.gdk.threads_init()
		self.brickfactory = BrickFactory(True)
		self.brickfactory.start()
		try:
			self.gladefile = gtk.glade.XML('./virtualbricks.glade')
		except:
			print "Cannot open required file 'virtualbricks.glade'"
			sys.exit(1)
		self.widg = self.get_widgets(self.widgetnames())
		self.widg['main_win'].show()
		self.ps = []
		self.bricks = []
		self.signals()
		self.timers()
		self.running_bricks = self.treestore('treeview_joblist', 
			[gobject.TYPE_STRING, gobject.TYPE_STRING, gobject.TYPE_STRING], 
			['PID','Type','Name'])
		self.bookmarks = self.treestore('treeview_bookmarks', 
				[gtk.gdk.Pixbuf, 
				 gobject.TYPE_STRING, 
				 gobject.TYPE_STRING, 
				 gobject.TYPE_STRING], 
				['Status','Type','Name', 'Parameters'])
		
		self.curtain = self.gladefile.get_widget('vpaned_mainwindow')
		self.curtain_down()
		
		self.selected = None
		

		try:
			gtk.main()
		except KeyboardInterrupt:
			self.quit()

	def curtain_is_down(self):
		print self.curtain.get_position()
		return (self.curtain.get_position()>500)

	def curtain_down(self):
		self.curtain.set_position(2147483647)
		self.gladefile.get_widget('label_showhidesettings').set_text('Show Settings')

	def curtain_up(self):
		if self.selected.get_type() == 'Switch':
			print "switch config"
			self.gladefile.get_widget('box_vmconfig').hide()
			self.gladefile.get_widget('box_switchconfig').show_all()
			self.gladefile.get_widget('box_tapconfig').hide()
			#self.gladefile.get_widget('box_tunnellconfig').hide()
			#self.gladefile.get_widget('box_tunnelcconfig').hide()
			#self.gladefile.get_widget('box_wireconfig').hide()
			#self.gladefile.get_widget('box_wirefilterconfig').hide()
		elif self.selected.get_type() == 'Tap':
			print "tap config"
			self.gladefile.get_widget('box_vmconfig').hide()
			self.gladefile.get_widget('box_switchconfig').hide()
			self.gladefile.get_widget('box_tapconfig').show_all()
			#self.gladefile.get_widget('box_tunnellconfig').hide()
			#self.gladefile.get_widget('box_tunnelcconfig').hide()
			#self.gladefile.get_widget('box_wireconfig').hide()
			#self.gladefile.get_widget('box_wirefilterconfig').hide()
		self.curtain.set_position(280)
		self.gladefile.get_widget('label_showhidesettings').set_text('Hide Settings')
		
	def get_treeselected(self, tree, store, pthinfo, c):

		if pthinfo is not None:
			path, col, cellx, celly = pthinfo
			tree.grab_focus()
			tree.set_cursor(path, col, 0)
			iter = self.bookmarks.get_iter(path)
			name = self.bookmarks.get_value(iter, c)
			self.config_last_iter = iter
			return name
		return ""

	def get_treeselected_name(self, t, s, p):
		return self.get_treeselected(t, s, p, 2)
	
	def get_treeselected_type(self, t, s, p):
		return self.get_treeselected(t, s, p, 1)
		

	def quit(self):
		print
		print "GUI: Goodbye!"
		self.brickfactory.quit()
		sys.exit(0)


	def get_widgets(self, l):
		r = dict()
		for i in l:	
			r[i] =  self.gladefile.get_widget(i)
			r[i].hide()
		return r

	def treestore(self, tree_name, fields,names):
		tree = self.gladefile.get_widget(tree_name)
		ret = gtk.TreeStore(*fields)
		tree.set_model(ret)
		for idx, name in enumerate(names):
			col = gtk.TreeViewColumn(name)
			if fields[idx] == gtk.gdk.Pixbuf:
				elem = gtk.CellRendererPixbuf()
				col.pack_start(elem, False)
				col.add_attribute(elem, 'pixbuf', idx)
			else:
				elem = gtk.CellRendererText()
				col.pack_start(elem, False)
				col.add_attribute(elem, 'text', idx)
			tree.append_column(col)
		return ret
		

	def widgetnames(self):
		return ['main_win', 
		'filechooserdialog_openimage', 
		'dialog_settings', 
		'dialog_bookmarks', 
		'menu_popup_bookmarks', 
		'dialog_about1',
		'dialog_create_image',
		'dialog_messages', 
		'menu_popup_imagelist', 
		'dialog_jobmonitor', 
		'menu_popup_joblist', 
		'menu_popup_usbhost',
		'menu_popup_usbguest', 
		'menu_popup_volumes',
		'dialog_newnetcard',
		'dialog_confirm_action',
		'dialog_new_redirect',
		'vm_config',
		'switch_win',
		'cables_win', 
		'tunnel_win',
		'ifconfig_win', 
		'wf_cfg_win'
	]

	def on_window1_destroy(self, widget=None, data=""):
		self.quit()
		pass
	def on_item_quit_activate(self, widget=None, data=""):
		self.quit()
		pass
	def on_item_settings_activate(self, widget=None, data=""):
		print "on_item_settings_activate undefined!"
		pass
	def on_item_settings_autoshow_activate(self, widget=None, data=""):
		print "on_item_settings_autoshow_activate undefined!"
		pass
	def on_item_settings_autohide_activate(self, widget=None, data=""):
		print "on_item_settings_autohide_activate undefined!"
		pass
	def on_item_create_image_activate(self, widget=None, data=""):
		print "on_item_create_image_activate undefined!"
		pass
	def on_item_about_activate(self, widget=None, data=""):
		self.widg['dialog_about1'].show_all()
		pass
	def on_toolbutton_launch_clicked(self, widget=None, data=""):
		print "on_toolbutton_launch_clicked undefined!"
		pass
	def on_toolbutton_launchxterm_clicked(self, widget=None, data=""):
		print "on_toolbutton_launchxterm_clicked undefined!"
		pass

	def on_toolbutton_launch_unmanaged_clicked(self, widget=None, data=""):
		print "on_toolbutton_launch_unmanaged_clicked undefined!"
		pass

	def on_vpaned_mainwindow_button_release_event(self, widget=None, event=None, data=""):
		self.curtain_up()
		return False

	def on_treeview_bookmarks_button_press_event(self, widget=None, event=None, data=""):
		tree = self.gladefile.get_widget('treeview_bookmarks');
		store = self.bookmarks
		x = int(event.x)
		y = int(event.y)
		time = event.time
		pthinfo = tree.get_path_at_pos(x, y)
		name = self.get_treeselected_name(tree, store, pthinfo)
		print name
		if event.button == 3:
			pass
		
	def on_treeview_bookmarks_cursor_changed(self, widget=None, event=None, data=""):
		tree = self.gladefile.get_widget('treeview_bookmarks');
		store = self.bookmarks
		path, focus = tree.get_cursor()
                iter = store.get_iter(path)
                ntype = store.get_value(iter, 1)
                name = store.get_value(iter, 2)
		self.selected = self.brickfactory.getbrickbyname(name)
		print self.selected
		
	def on_treeview_bookmarks_row_activated_event(self, widget=None, event=None , data=""):
		tree = self.gladefile.get_widget('treeview_bookmarks');
		store = self.bookmarks
		path, focus = tree.get_cursor()
                iter = store.get_iter(path)
                ntype = store.get_value(iter, 1)
                name = store.get_value(iter, 2)
		print "Activating %s %s" % (ntype, name)
	def on_treeview_bootimages_button_press_event(self, widget=None, data=""):
		print "on_treeview_bootimages_button_press_event undefined!"
		pass
	def on_treeview_bootimages_cursor_changed(self, widget=None, data=""):
		print "on_treeview_bootimages_cursor_changed undefined!"
		pass
	def on_treeview_bootimages_row_activated_event(self, widget=None, data=""):
		print "on_treeview_bootimages_row_activated_event undefined!"
		pass
	def on_treeview_joblist_button_press_event(self, widget=None, data=""):
		print "on_treeview_joblist_button_press_event undefined!"
		pass
	def on_treeview_joblist_row_activated_event(self, widget=None, data=""):
		print "on_treeview_joblist_row_activated_event undefined!"
		pass
	def on_button_togglesettings_clicked(self, widget=None, data=""):
		if self.curtain_is_down():
			self.curtain_up()
			print "up"
		else:
			self.curtain_down()
			print "down"
	def on_filechooserdialog_openimage_response(self, widget=None, data=""):
		print "on_filechooserdialog_openimage_response undefined!"
		pass
	def on_button_openimage_cancel_clicked(self, widget=None, data=""):
		print "on_button_openimage_cancel_clicked undefined!"
		pass
	def on_button_openimage_open_clicked(self, widget=None, data=""):
		print "on_button_openimage_open_clicked undefined!"
		pass
	def on_dialog_settings_response(self, widget=None, data=""):
		print "on_dialog_settings_response undefined!"
		pass
	def on_treeview_cdromdrives_row_activated(self, widget=None, data=""):
		print "on_treeview_cdromdrives_row_activated undefined!"
		pass
	def on_button_settings_add_cdevice_clicked(self, widget=None, data=""):
		print "on_button_settings_add_cdevice_clicked undefined!"
		pass
	def on_button_settings_rem_cdevice_clicked(self, widget=None, data=""):
		print "on_button_settings_rem_cdevice_clicked undefined!"
		pass
	def on_treeview_qemupaths_row_activated(self, widget=None, data=""):
		print "on_treeview_qemupaths_row_activated undefined!"
		pass
	def on_button_settings_add_qemubin_clicked(self, widget=None, data=""):
		print "on_button_settings_add_qemubin_clicked undefined!"
		pass
	def on_button_settings_rem_qemubin_clicked(self, widget=None, data=""):
		print "on_button_settings_rem_qemubin_clicked undefined!"
		pass
	def on_dialog_bookmarks_response(self, widget=None, data=""):
		print "on_dialog_bookmarks_response undefined!"
		pass
	def on_edit_bookmark_activate(self, widget=None, data=""):
		print "on_edit_bookmark_activate undefined!"
		pass
	def on_bookmark_info_activate(self, widget=None, data=""):
		print "on_bookmark_info_activate undefined!"
		pass
	def on_delete_bookmark_activate(self, widget=None, data=""):
		print "on_delete_bookmark_activate undefined!"
		pass
	def on_dialog_about_response(self, widget=None, data=""):
		self.widg['dialog_about1'].hide()
		return True
	def on_dialog_create_image_response(self, widget=None, data=""):
		print "on_dialog_create_image_response undefined!"
		pass
	def on_filechooserbutton_newimage_dest_selection_changed(self, widget=None, data=""):
		print "on_filechooserbutton_newimage_dest_selection_changed undefined!"
		pass
	def on_filechooserbutton_newimage_dest_current_folder_changed(self, widget=None, data=""):
		print "on_filechooserbutton_newimage_dest_current_folder_changed undefined!"
		pass
	def on_entry_newimage_name_changed(self, widget=None, data=""):
		print "on_entry_newimage_name_changed undefined!"
		pass
	def on_combobox_newimage_format_changed(self, widget=None, data=""):
		print "on_combobox_newimage_format_changed undefined!"
		pass
	def on_spinbutton_newimage_size_changed(self, widget=None, data=""):
		print "on_spinbutton_newimage_size_changed undefined!"
		pass
	def on_combobox_newimage_sizeunit_changed(self, widget=None, data=""):
		print "on_combobox_newimage_sizeunit_changed undefined!"
		pass
	def on_button_create_image_clicked(self, widget=None, data=""):
		print "on_button_create_image_clicked undefined!"
		pass
	def on_dialog_messages_response(self, widget=None, data=""):
		print "on_dialog_messages_response undefined!"
		pass
	def on_item_info_activate(self, widget=None, data=""):
		print "on_item_info_activate undefined!"
		pass
	def on_item_bookmark_activate(self, widget=None, data=""):
		print "on_item_bookmark_activate undefined!"
		pass
	def on_dialog_jobmonitor_response(self, widget=None, data=""):
		print "on_dialog_jobmonitor_response undefined!"
		pass
	def on_toolbutton_stop_job_clicked(self, widget=None, data=""):
		print "on_toolbutton_stop_job_clicked undefined!"
		pass
	def on_toolbutton_reset_job_clicked(self, widget=None, data=""):
		print "on_toolbutton_reset_job_clicked undefined!"
		pass
	def on_toolbutton_pause_job_clicked(self, widget=None, data=""):
		print "on_toolbutton_pause_job_clicked undefined!"
		pass
	def on_toolbutton_rerun_job_clicked(self, widget=None, data=""):
		print "on_toolbutton_rerun_job_clicked undefined!"
		pass
	def on_treeview_jobmon_volumes_button_press_event(self, widget=None, data=""):
		print "on_treeview_jobmon_volumes_button_press_event undefined!"
		pass
	def on_treeview_jobmon_volumes_row_activated(self, widget=None, data=""):
		print "on_treeview_jobmon_volumes_row_activated undefined!"
		pass
	def on_button_jobmon_apply_cdrom_clicked(self, widget=None, data=""):
		print "on_button_jobmon_apply_cdrom_clicked undefined!"
		pass
	def on_button_jobmon_apply_fda_clicked(self, widget=None, data=""):
		print "on_button_jobmon_apply_fda_clicked undefined!"
		pass
	def on_button_jobmon_apply_fdb_clicked(self, widget=None, data=""):
		print "on_button_jobmon_apply_fdb_clicked undefined!"
		pass
	def on_combobox_jobmon_cdrom_changed(self, widget=None, data=""):
		print "on_combobox_jobmon_cdrom_changed undefined!"
		pass
	def on_combobox_jobmon_fda_changed(self, widget=None, data=""):
		print "on_combobox_jobmon_fda_changed undefined!"
		pass
	def on_combobox_jobmon_fdb_changed(self, widget=None, data=""):
		print "on_combobox_jobmon_fdb_changed undefined!"
		pass
	def on_treeview_usbhost_button_press_event(self, widget=None, data=""):
		print "on_treeview_usbhost_button_press_event undefined!"
		pass
	def on_treeview_usbhost_row_activated(self, widget=None, data=""):
		print "on_treeview_usbhost_row_activated undefined!"
		pass
	def on_treeview_usbguest_button_press_event(self, widget=None, data=""):
		print "on_treeview_usbguest_button_press_event undefined!"
		pass
	def on_treeview_usbguest_row_activated(self, widget=None, data=""):
		print "on_treeview_usbguest_row_activated undefined!"
		pass
	def on_item_jobmonoitor_activate(self, widget=None, data=""):
		print "on_item_jobmonoitor_activate undefined!"
		pass
	def on_item_stop_job_activate(self, widget=None, data=""):
		print "on_item_stop_job_activate undefined!"
		pass
	def on_item_cont_job_activate(self, widget=None, data=""):
		print "on_item_cont_job_activate undefined!"
		pass
	def on_item_reset_job_activate(self, widget=None, data=""):
		print "on_item_reset_job_activate undefined!"
		pass
	def on_item_kill_job_activate(self, widget=None, data=""):
		print "on_item_kill_job_activate undefined!"
		pass
	def on_attach_device_activate(self, widget=None, data=""):
		print "on_attach_device_activate undefined!"
		pass
	def on_detach_device_activate(self, widget=None, data=""):
		print "on_detach_device_activate undefined!"
		pass
	def on_item_eject_activate(self, widget=None, data=""):
		print "on_item_eject_activate undefined!"
		pass
	def on_dialog_newnetcard_response(self, widget=None, data=""):
		print "on_dialog_newnetcard_response undefined!"
		pass
	def on_combobox_networktype_changed(self, widget=None, data=""):
		print "on_combobox_networktype_changed undefined!"
		pass
	def on_entry_network_macaddr_changed(self, widget=None, data=""):
		print "on_entry_network_macaddr_changed undefined!"
		pass
	def on_entry_network_ip_changed(self, widget=None, data=""):
		print "on_entry_network_ip_changed undefined!"
		pass
	def on_spinbutton_network_port_changed(self, widget=None, data=""):
		print "on_spinbutton_network_port_changed undefined!"
		pass
	def on_spinbutton_network_vlan_changed(self, widget=None, data=""):
		print "on_spinbutton_network_vlan_changed undefined!"
		pass
	def on_entry_network_ifacename_changed(self, widget=None, data=""):
		print "on_entry_network_ifacename_changed undefined!"
		pass
	def on_entry_network_tuntapscript_changed(self, widget=None, data=""):
		print "on_entry_network_tuntapscript_changed undefined!"
		pass
	def on_button__network_open_tuntap_file_clicked(self, widget=None, data=""):
		print "on_button__network_open_tuntap_file_clicked undefined!"
		pass
	def on_spinbutton_network_filedescriptor_changed(self, widget=None, data=""):
		print "on_spinbutton_network_filedescriptor_changed undefined!"
		pass
	def on_dialog_new_redirect_response(self, widget=None, data=""):
		print "on_dialog_new_redirect_response undefined!"
		pass
	def on_radiobutton_redirect_TCP_toggled(self, widget=None, data=""):
		print "on_radiobutton_redirect_TCP_toggled undefined!"
		pass
	def on_radiobutton_redirect_UDP_toggled(self, widget=None, data=""):
		print "on_radiobutton_redirect_UDP_toggled undefined!"
		pass
	def on_spinbutton_redirect_sport_changed(self, widget=None, data=""):
		print "on_spinbutton_redirect_sport_changed undefined!"
		pass
	def on_entry_redirect_gIP_changed(self, widget=None, data=""):
		print "on_entry_redirect_gIP_changed undefined!"
		pass
	def on_spinbutton_redirect_dport_changed(self, widget=None, data=""):
		print "on_spinbutton_redirect_dport_changed undefined!"
		pass

	def signals(self):
		self.signaldict =  {
			"on_window1_destroy":self.on_window1_destroy,
			"on_item_quit_activate":self.on_item_quit_activate,
			"on_item_settings_activate":self.on_item_settings_activate,
			"on_item_settings_autoshow_activate":self.on_item_settings_autoshow_activate,
			"on_item_settings_autohide_activate":self.on_item_settings_autohide_activate,
			"on_item_create_image_activate":self.on_item_create_image_activate,
			"on_item_about_activate":self.on_item_about_activate,
			"on_toolbutton_launch_clicked":self.on_toolbutton_launch_clicked,
			"on_toolbutton_launchxterm_clicked":self.on_toolbutton_launchxterm_clicked,
			"on_toolbutton_launch_unmanaged_clicked":self.on_toolbutton_launch_unmanaged_clicked,
			"on_vpaned_mainwindow_button_release_event":self.on_vpaned_mainwindow_button_release_event,
			"on_treeview_bookmarks_button_press_event":self.on_treeview_bookmarks_button_press_event,
			"on_treeview_bookmarks_cursor_changed":self.on_treeview_bookmarks_cursor_changed,
			"on_treeview_bookmarks_row_activated_event":self.on_treeview_bookmarks_row_activated_event,
			"on_treeview_bootimages_button_press_event":self.on_treeview_bootimages_button_press_event,
			"on_treeview_bootimages_cursor_changed":self.on_treeview_bootimages_cursor_changed,
			"on_treeview_bootimages_row_activated_event":self.on_treeview_bootimages_row_activated_event,
			"on_treeview_joblist_button_press_event":self.on_treeview_joblist_button_press_event,
			"on_treeview_joblist_row_activated_event":self.on_treeview_joblist_row_activated_event,
			"on_button_togglesettings_clicked":self.on_button_togglesettings_clicked,
			"on_filechooserdialog_openimage_response":self.on_filechooserdialog_openimage_response,
			"on_button_openimage_cancel_clicked":self.on_button_openimage_cancel_clicked,
			"on_button_openimage_open_clicked":self.on_button_openimage_open_clicked,
			"on_dialog_settings_response":self.on_dialog_settings_response,
			"on_treeview_cdromdrives_row_activated":self.on_treeview_cdromdrives_row_activated,
			"on_button_settings_add_cdevice_clicked":self.on_button_settings_add_cdevice_clicked,
			"on_button_settings_rem_cdevice_clicked":self.on_button_settings_rem_cdevice_clicked,
			"on_treeview_qemupaths_row_activated":self.on_treeview_qemupaths_row_activated,
			"on_button_settings_add_qemubin_clicked":self.on_button_settings_add_qemubin_clicked,
			"on_button_settings_rem_qemubin_clicked":self.on_button_settings_rem_qemubin_clicked,
			"on_dialog_bookmarks_response":self.on_dialog_bookmarks_response,
			"on_edit_bookmark_activate":self.on_edit_bookmark_activate,
			"on_bookmark_info_activate":self.on_bookmark_info_activate,
			"on_delete_bookmark_activate":self.on_delete_bookmark_activate,
			"on_dialog_about_response":self.on_dialog_about_response,
			"on_dialog_create_image_response":self.on_dialog_create_image_response,
			"on_filechooserbutton_newimage_dest_selection_changed":self.on_filechooserbutton_newimage_dest_selection_changed,
			"on_filechooserbutton_newimage_dest_current_folder_changed":self.on_filechooserbutton_newimage_dest_current_folder_changed,
			"on_entry_newimage_name_changed":self.on_entry_newimage_name_changed,
			"on_combobox_newimage_format_changed":self.on_combobox_newimage_format_changed,
			"on_spinbutton_newimage_size_changed":self.on_spinbutton_newimage_size_changed,
			"on_combobox_newimage_sizeunit_changed":self.on_combobox_newimage_sizeunit_changed,
			"on_button_create_image_clicked":self.on_button_create_image_clicked,
			"on_dialog_messages_response":self.on_dialog_messages_response,
			"on_item_info_activate":self.on_item_info_activate,
			"on_item_bookmark_activate":self.on_item_bookmark_activate,
			"on_dialog_jobmonitor_response":self.on_dialog_jobmonitor_response,
			"on_toolbutton_stop_job_clicked":self.on_toolbutton_stop_job_clicked,
			"on_toolbutton_reset_job_clicked":self.on_toolbutton_reset_job_clicked,
			"on_toolbutton_pause_job_clicked":self.on_toolbutton_pause_job_clicked,
			"on_toolbutton_rerun_job_clicked":self.on_toolbutton_rerun_job_clicked,
			"on_treeview_jobmon_volumes_button_press_event":self.on_treeview_jobmon_volumes_button_press_event,
			"on_treeview_jobmon_volumes_row_activated":self.on_treeview_jobmon_volumes_row_activated,
			"on_button_jobmon_apply_cdrom_clicked":self.on_button_jobmon_apply_cdrom_clicked,
			"on_button_jobmon_apply_fda_clicked":self.on_button_jobmon_apply_fda_clicked,
			"on_button_jobmon_apply_fdb_clicked":self.on_button_jobmon_apply_fdb_clicked,
			"on_combobox_jobmon_cdrom_changed":self.on_combobox_jobmon_cdrom_changed,
			"on_combobox_jobmon_fda_changed":self.on_combobox_jobmon_fda_changed,
			"on_combobox_jobmon_fdb_changed":self.on_combobox_jobmon_fdb_changed,
			"on_treeview_usbhost_button_press_event":self.on_treeview_usbhost_button_press_event,
			"on_treeview_usbhost_row_activated":self.on_treeview_usbhost_row_activated,
			"on_treeview_usbguest_button_press_event":self.on_treeview_usbguest_button_press_event,
			"on_treeview_usbguest_row_activated":self.on_treeview_usbguest_row_activated,
			"on_item_jobmonoitor_activate":self.on_item_jobmonoitor_activate,
			"on_item_stop_job_activate":self.on_item_stop_job_activate,
			"on_item_cont_job_activate":self.on_item_cont_job_activate,
			"on_item_reset_job_activate":self.on_item_reset_job_activate,
			"on_item_kill_job_activate":self.on_item_kill_job_activate,
			"on_attach_device_activate":self.on_attach_device_activate,
			"on_detach_device_activate":self.on_detach_device_activate,
			"on_item_eject_activate":self.on_item_eject_activate,
			"on_dialog_newnetcard_response":self.on_dialog_newnetcard_response,
			"on_combobox_networktype_changed":self.on_combobox_networktype_changed,
			"on_entry_network_macaddr_changed":self.on_entry_network_macaddr_changed,
			"on_entry_network_ip_changed":self.on_entry_network_ip_changed,
			"on_spinbutton_network_port_changed":self.on_spinbutton_network_port_changed,
			"on_spinbutton_network_vlan_changed":self.on_spinbutton_network_vlan_changed,
			"on_entry_network_ifacename_changed":self.on_entry_network_ifacename_changed,
			"on_entry_network_tuntapscript_changed":self.on_entry_network_tuntapscript_changed,
			"on_button__network_open_tuntap_file_clicked":self.on_button__network_open_tuntap_file_clicked,
			"on_spinbutton_network_filedescriptor_changed":self.on_spinbutton_network_filedescriptor_changed,
			"on_dialog_new_redirect_response":self.on_dialog_new_redirect_response,
			"on_radiobutton_redirect_TCP_toggled":self.on_radiobutton_redirect_TCP_toggled,
			"on_radiobutton_redirect_UDP_toggled":self.on_radiobutton_redirect_UDP_toggled,
			"on_spinbutton_redirect_sport_changed":self.on_spinbutton_redirect_sport_changed,
			"on_entry_redirect_gIP_changed":self.on_entry_redirect_gIP_changed,
			"on_spinbutton_redirect_dport_changed":self.on_spinbutton_redirect_dport_changed,
		}
		self.gladefile.signal_autoconnect(self.signaldict)

	def timers(self):
		gobject.timeout_add(1000,self.check_joblist)
		gobject.timeout_add(1100,self.check_bricks)

	def check_bricks(self):
		new_bricks = []
		force_render = False
		for b in self.brickfactory.bricks:
			if b.gui_changed:
				b.gui_changed = False
				force_render = True
			new_bricks.append(b)
		if force_render or new_bricks != self.bricks:
			self.bookmarks.clear()
			self.bricks = new_bricks
			tree = self.gladefile.get_widget('treeview_bookmarks')
			for b in self.bricks:
				iter = self.bookmarks.append(None, None)
				if b.proc is not None:
		                        self.bookmarks.set_value(iter,0,tree.render_icon(gtk.STOCK_YES, gtk.ICON_SIZE_MENU))
				else:
		                        self.bookmarks.set_value(iter,0,tree.render_icon(gtk.STOCK_NO, gtk.ICON_SIZE_MENU))
				self.bookmarks.set_value(iter,1,b.get_type())
				self.bookmarks.set_value(iter,2,b.name)
				if (b.get_type() == "Switch"):
					self.bookmarks.set_value(iter, 3, "Free ports: %d/%d" % (b.socks[0].get_free_ports(), int(b.cfg.numports)))
				if (b.get_type() == "Wire"):
					p0 = "disconnected"
					p1 = "disconnected"
					if (b.plugs[0].sock):
						p0 = b.plugs[0].sock.brick.name
					if b.plugs[1].sock:
						p1 = b.plugs[1].sock.brick.name
					self.bookmarks.set_value(iter, 3, "%s <--> %s" % (p0,p1))
				if (b.get_type() == "Tap"):
					p0 = "disconnected"
					if b.plugs[0].sock:
						p0 = "connected to " + b.plugs[0].sock.brick.name 
					self.bookmarks.set_value(iter, 3, p0)
					
			print "bricks list updated"
		return True
			
			
		
	def check_joblist(self):
		new_ps = []
		for b in self.brickfactory.bricks:
			if b.proc is not None:
				new_ps.append(b)
		
		if self.ps != new_ps:
			self.ps = new_ps
			self.bricks = []
			self.running_bricks.clear()
			for b in self.ps:
				iter = self.running_bricks.append(None, None)
				self.running_bricks.set_value(iter,0,b.pid)
				self.running_bricks.set_value(iter,1,b.get_type())
				self.running_bricks.set_value(iter,2,b.name)
			print "proc list updated"
		return True


#Main.

VB = VBGUI()
		
		
	




